import {
  Resolver,
  Int,
  InputType,
  Query,
  Mutation,
  Args,
  ObjectType,
  Field,
  Float,
} from '@nestjs/graphql';
import { MalwareService } from './malware.service';
import { Malware } from './malware.entity';
import { CreateMalwareInput, UpdateMalwareInput } from './malware.input';
import { PartialType } from '@nestjs/graphql';

@InputType()
export class SearchMalwareInput extends PartialType(CreateMalwareInput) {}

@ObjectType()
export class MalwareSearchResult {
  @Field(() => Int)
  page: number;

  @Field(() => Int)
  pageSize: number;

  @Field(() => Int)
  total: number;

  @Field(() => Int)
  totalPages: number;

  @Field(() => [Malware])
  results: Malware[];
}

@Resolver(() => Malware)
export class MalwareResolver {
  constructor(private readonly malwareService: MalwareService) {}

  @Mutation(() => Malware)
  async createMalware(
    @Args('input') createMalwareInput: CreateMalwareInput,
  ): Promise<Malware> {
    return this.malwareService.create(createMalwareInput);
  }

  @Query(() => MalwareSearchResult)
  async searchMalwareWithFilters(
    @Args('filters', { type: () => SearchMalwareInput, nullable: true }) filters: SearchMalwareInput = {},
    @Args('page', { type: () => Float, defaultValue: 1 }) page: number,
    @Args('pageSize', { type: () => Float, defaultValue: 20 }) pageSize: number,
  ): Promise<MalwareSearchResult> {
    return this.malwareService.searchWithFilters(filters, page, pageSize);
  }

  @Query(() => Malware, { nullable: true })
  async malware(@Args('id') id: string): Promise<Malware> {
    return this.malwareService.findOne(id);
  }

  @Mutation(() => Malware)
  async updateMalware(
    @Args('id') id: string,
    @Args('input') updateMalwareInput: UpdateMalwareInput,
  ): Promise<Malware> {
    return this.malwareService.update(id, updateMalwareInput);
  }

  @Mutation(() => Boolean)
  async removeMalware(@Args('id') id: string): Promise<boolean> {
    return this.malwareService.remove(id);
  }
}