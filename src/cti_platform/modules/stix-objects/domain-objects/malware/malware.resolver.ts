import { Resolver, Query, InputType, Mutation, Args, Int, Subscription} from '@nestjs/graphql';
import { MalwareService } from './malware.service';
import { CreateMalwareInput, UpdateMalwareInput } from './malware.input';
import { Malware } from './malware.entity';
import { ObjectType, Field } from '@nestjs/graphql';
import { PartialType } from '@nestjs/graphql';
import { PUB_SUB } from 'src/cti_platform/modules/pubsub.module';
import { Inject } from '@nestjs/common';
import { RedisPubSub } from 'graphql-redis-subscriptions';


@InputType()
export class SearchMalwareInput extends PartialType(CreateMalwareInput){}


@ObjectType()
export class MalwareSearchResult {
  @Field(() => Int)
  page: number;

  @Field(() => Int)
  pageSize: number;

  @Field(() => Int)
  total: number;

  @Field(() => Int)
  totalPages: number;

  @Field(() => [Malware])
  results: Malware[];
}

@Resolver(() => Malware)
export class MalwareResolver   {
    constructor(
      private readonly malwareService: MalwareService,
      @Inject(PUB_SUB) private readonly pubSub: RedisPubSub
    ) { }
  
    // Date conversion helper
    public convertDates(payload: any): Malware {
      const dateFields = ['created', 'modified', 'valid_from', 'valid_until'];
      dateFields.forEach(field => {
        if (payload[field]) payload[field] = new Date(payload[field]);
      });
      return payload;
    }
  
    // Subscription Definitions
    @Subscription(() => Malware, {
      name: 'malwareCreated',
      resolve: (payload) => payload,
    })
   malwareCreated() {
      return this.pubSub.asyncIterator('malwareCreated');
    }
  
    @Subscription(() => Malware, {
      name: 'malwareUpdated',
      resolve: (payload) => payload,
    })
    malwareUpdated() {
      return this.pubSub.asyncIterator('malwareUpdated');
    }
  
    @Subscription(() => String, { name: 'malwareDeleted' })
    malwareDeleted() {
      return this.pubSub.asyncIterator('malwareDeleted');
    }
  

  @Mutation(() => Malware)
  async createMalware(
    @Args('input') createMalwareInput: CreateMalwareInput,
  ): Promise<Malware> {
    return this.malwareService.create(createMalwareInput);
  }

  @Query(() => MalwareSearchResult)
  async searchMalware(
    @Args('filters', { type: () => SearchMalwareInput, nullable: true }) filters: SearchMalwareInput = {},
    @Args('page', { type: () => Int, defaultValue: 1 }) page: number,
    @Args('pageSize', { type: () => Int, defaultValue: 10 }) pageSize: number,
  ): Promise<MalwareSearchResult> {
    return this.malwareService.searchWithFilters(filters, page, pageSize);
  }

  @Query(() => Malware, { nullable: true })
  async malware(@Args('id') id: string): Promise<Malware> {
    return this.malwareService.findOne(id);
  }

  @Mutation(() => Malware)
  async updateMalware(
    @Args('id') id: string,
    @Args('input') updateMalwareInput: UpdateMalwareInput,
  ): Promise<Malware> {
    return this.malwareService.update(id, updateMalwareInput);
  }

  @Mutation(() => Boolean)
  async deleteMalware(@Args('id') id: string): Promise<boolean> {
    return this.malwareService.remove(id);
  }
}