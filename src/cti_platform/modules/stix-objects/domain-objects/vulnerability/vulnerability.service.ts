import { Inject, Injectable, InternalServerErrorException, NotFoundException, OnModuleInit } from '@nestjs/common';
import { Client, } from '@opensearch-project/opensearch';
import { CreateVulnerabilityInput, UpdateVulnerabilityInput } from './vulnerability.input';
import { SearchVulnerabilityInput } from './vulnerability.resolver';
import { Vulnerability } from './vulnerability.entity';
import { PUB_SUB } from 'src/cti_platform/modules/pubsub.module';
import { RedisPubSub } from 'graphql-redis-subscriptions';
import { BaseStixService } from '../../base-stix.service';

@Injectable()
export class VulnerabilityService  extends BaseStixService<Vulnerability> implements OnModuleInit {
  private readonly logger = console; // Replace with a proper logger if needed
  protected typeName = 'vulnerability';
  private readonly index = 'vulnerabilities';
 

   constructor(
          @Inject(PUB_SUB) pubSub: RedisPubSub,
          @Inject('OPENSEARCH_CLIENT') private readonly openSearchService: Client
        ) {
          super(pubSub);
        }
    

  async onModuleInit() {
    await this.ensureIndex();
  }

  async create(createVulnerabilityInput: CreateVulnerabilityInput): Promise<Vulnerability> {

    if (createVulnerabilityInput.cve_id) {
      this.validateCveId(createVulnerabilityInput.cve_id);
    }
    if (createVulnerabilityInput.cvss_v3_score) {
      this.validateCvssScore(createVulnerabilityInput.cvss_v3_score);
    }

    const vulnerability: Vulnerability = {
      ...createVulnerabilityInput,
      
      id: createVulnerabilityInput.id ,
      type: 'vulnerability' as const,
      spec_version: '2.1',
      created: new Date().toISOString(),
      modified: new Date().toISOString(),
      name: createVulnerabilityInput.name, // Required field
     
    };

    // Check if document already exists
    const exists = await this.openSearchService.exists({
      index: this.index,
      id: vulnerability.id,
    });

    if (exists.body) {
      this.logger?.warn(`Document already exists`, { id: vulnerability.id });

      const existingDoc = await this.findOne(vulnerability.id);
      return existingDoc;

    }

    try {
      const response = await this.openSearchService.index({
        index: this.index,
        id: vulnerability.id,
        body: vulnerability,
        refresh: 'wait_for',
      });

      if (response.body.result !== 'created') {
        throw new Error('Failed to index vulnerability');
      }
      await this.publishCreated(vulnerability);
      return vulnerability;
    } catch (error) {
      throw new InternalServerErrorException({
        message: 'Failed to create vulnerability',
        details: error.meta?.body?.error || error.message,
      });
    }
  }

  async findOne(id: string): Promise<Vulnerability> {
    try {
      const response = await this.openSearchService.get({
        index: this.index,
        id,
      });

      const source = response.body._source;
      return {
        id: response.body._id,
        type: 'vulnerability' as const,
        spec_version: source.spec_version || '2.1',
        created: source.created || new Date(),
        modified: source.modified || new Date(),
        name: source.name, // Required field
        ...source,
      };
    } catch (error) {
      if (error.meta?.statusCode === 404) {
        throw new NotFoundException(`Vulnerability with ID ${id} not found`);
      }
      throw new InternalServerErrorException({
        message: 'Failed to fetch vulnerability',
        details: error.meta?.body?.error || error.message,
      });
    }
  }

  async findByCveId(cveId: string): Promise<Vulnerability> {
    this.validateCveId(cveId);
    try {
      const response = await this.openSearchService.search({
        index: this.index,
        body: {
          query: {
            term: { cve_id: cveId },
          },
        },
      });

      if (!response.body.hits.hits.length) {
        throw new NotFoundException(`Vulnerability with CVE ID ${cveId} not found`);
      }

      const hit = response.body.hits.hits[0];
      return {
        ...hit._source,
        id: hit._id,
        type: 'vulnerability' as const,
        spec_version: hit._source.spec_version || '2.1',
        created: hit._source.created || new Date(),
        modified: hit._source.modified || new Date(),
        name: hit._source.name, // Required field
       
      };
    } catch (error) {
      if (error instanceof NotFoundException) throw error;
      throw new InternalServerErrorException({
        message: 'Failed to search vulnerability by CVE ID',
        details: error.meta?.body?.error || error.message,
      });
    }
  }

  async update(id: string, updateVulnerabilityInput: UpdateVulnerabilityInput): Promise<Vulnerability> {
    if (updateVulnerabilityInput.cve_id) {
      this.validateCveId(updateVulnerabilityInput.cve_id);
    }
    if (updateVulnerabilityInput.cvss_v3_score) {
      this.validateCvssScore(updateVulnerabilityInput.cvss_v3_score);
    }

    try {
      const existingVulnerability = await this.findOne(id);
      const updatedVulnerability: Vulnerability = {
        ...existingVulnerability,
        ...updateVulnerabilityInput,
        modified: new Date().toISOString(),
      };

      const response = await this.openSearchService.update({
        index: this.index,
        id,
        body: { doc: updatedVulnerability },
        retry_on_conflict: 3,
        refresh: 'wait_for',
      });

      if (response.body.result !== 'updated') {
        throw new Error('Failed to update vulnerability');
      }
      await this.publishUpdated(updatedVulnerability);
      return updatedVulnerability;
    } catch (error) {
      if (error instanceof NotFoundException) throw error;
      throw new InternalServerErrorException({
        message: 'Failed to update vulnerability',
        details: error.meta?.body?.error || error.message,
      });
    }
  }

  async remove(id: string): Promise<boolean> {
    try {
      const response = await this.openSearchService.delete({
        index: this.index,
        id,
        refresh: 'wait_for',
      });


      const success = response.body.result === 'deleted';
      if (success) {
        await this.publishDeleted(id);
      }
      
    } catch (error) {
      if (error.meta?.statusCode === 404) {
        return false;
      }
      throw new InternalServerErrorException({
        message: 'Failed to delete vulnerability',
        details: error.meta?.body?.error || error.message,
      });
    }
  }

  async searchWithFilters(
    filters: SearchVulnerabilityInput = {},
    page: number = 1,
    pageSize: number = 10,
    sortField: keyof Vulnerability = 'modified',
    sortOrder: 'asc' | 'desc' = 'desc'
  ): Promise<{
    page: number;
    pageSize: number;
    total: number;
    totalPages: number;
    results: Vulnerability[];
  }> {
    try {
      const from = (page - 1) * pageSize;
      const queryBuilder: { query: any; sort?: any[] } = {
        query: { bool: { must: [], filter: [], should: [] } },
        sort: [{ [sortField]: { order: sortOrder } }],
      };

      for (const [key, value] of Object.entries(filters)) {
        if (!value) continue;

        if (Array.isArray(value)) {
          queryBuilder.query.bool.filter.push({ terms: { [key]: value } });
        } else if (typeof value === 'boolean' || typeof value === 'number') {
          queryBuilder.query.bool.filter.push({ term: { [key]: value } });
        } else if (['cvss_v3_score', 'created', 'modified'].includes(key)) {
          if (typeof value === 'object' && ('gte' in value || 'lte' in value || 'gt' in value || 'lt' in value)) {
            queryBuilder.query.bool.filter.push({ range: { [key]: value } });
          } else if (value instanceof Date) {
            queryBuilder.query.bool.filter.push({
              range: { [key]: { gte: value, lte: value } },
            });
          }
        } else if (typeof value === 'string') {
          if (value.includes('*')) {
            queryBuilder.query.bool.must.push({ wildcard: { [key]: value.toLowerCase() } });
          } else if (value.includes('~')) {
            queryBuilder.query.bool.should.push({
              fuzzy: { [key]: { value: value.replace('~', ''), fuzziness: 'AUTO' } },
            });
          } else if (value.startsWith('"') && value.endsWith('"')) {
            queryBuilder.query.bool.must.push({
              match_phrase: { [key]: value.replace(/"/g, '') },
            });
          } else {
            queryBuilder.query.bool.must.push({ match: { [key]: value } });
          }
        }
      }

      if (!queryBuilder.query.bool.must.length && !queryBuilder.query.bool.filter.length && !queryBuilder.query.bool.should.length) {
        queryBuilder.query = { match_all: {} };
      } else if (queryBuilder.query.bool.should.length > 0) {
        queryBuilder.query.bool.minimum_should_match = 1;
      }

      const response = await this.openSearchService.search({
        index: this.index,
        from,
        size: pageSize,
        body: queryBuilder,
      });

      const total = typeof response.body.hits.total === 'number'
        ? response.body.hits.total
        : response.body.hits.total?.value ?? 0;

      return {
        page,
        pageSize,
        total,
        totalPages: Math.ceil(total / pageSize),
        results: response.body.hits.hits.map((hit) => ({
          ...hit._source,
          id: hit._id,
          type: 'vulnerability' as const,
          spec_version: hit._source.spec_version || '2.1',
          created: hit._source.created || new Date(),
          modified: hit._source.modified || new Date(),
          name: hit._source.name, // Required field
         
        })),
      };
    } catch (error) {
      throw new InternalServerErrorException({
        message: 'Failed to search vulnerabilities',
        details: error.meta?.body?.error || error.message,
      });
    }
  }

  async ensureIndex(): Promise<void> {
    try {
      const exists = await this.openSearchService.indices.exists({ index: this.index });
      if (!exists.body) {
        await this.openSearchService.indices.create({
          index: this.index,
          body: {
            mappings: {
              dynamic: 'true',
              properties: {
                id: { type: 'keyword' },
                type: { type: 'keyword' },
                spec_version: { type: 'keyword' },
                created: { type: 'date' },
                modified: { type: 'date' },
                name: { type: 'text' },
                description: { type: 'text' },
                cve_id: { type: 'keyword' },
                cvss_v3_score: { type: 'float' },
                external_references: {
                  type: 'nested',
                  properties: {
                    source_name: { type: 'keyword' },
                    description: { type: 'text' },
                    url: { type: 'keyword' },
                    external_id: { type: 'keyword' },
                  },
                },
              },
            },
          },
        });
      }
    } catch (error) {
      throw new InternalServerErrorException({
        message: 'Failed to initialize vulnerabilities index',
        details: error.meta?.body?.error || error.message,
      });
    }
  }

  private validateCveId(cveId: string): void {
    const cvePattern = /^CVE-\d{4}-\d{4,}$/;
    if (!cvePattern.test(cveId)) {
      throw new InternalServerErrorException({
        message: 'Invalid CVE ID format',
        details: 'Expected format: CVE-YYYY-NNNNN',
      });
    }
  }

  private validateCvssScore(score: string): void {
    const numScore = parseFloat(score);
    if (isNaN(numScore) || numScore < 0 || numScore > 10) {
      throw new InternalServerErrorException({
        message: 'Invalid CVSS score',
        details: 'CVSS score must be a number between 0.0 and 10.0',
      });
    }
  }
}