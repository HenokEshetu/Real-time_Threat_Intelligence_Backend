import { Resolver, Query,InputType, Mutation, Args, Int, Subscription } from '@nestjs/graphql';
import { VulnerabilityService } from './vulnerability.service';
import { Vulnerability } from './vulnerability.entity';
import { CreateVulnerabilityInput, UpdateVulnerabilityInput } from './vulnerability.input';
import { PartialType } from '@nestjs/graphql';
import { ObjectType, Field } from '@nestjs/graphql';
import { RedisPubSub } from 'graphql-redis-subscriptions';
import { PUB_SUB } from 'src/cti_platform/modules/pubsub.module';
import { Inject } from '@nestjs/common';

@InputType()
export class SearchVulnerabilityInput extends PartialType(CreateVulnerabilityInput){}


@ObjectType()
export class VulnerabilitySearchResult {
  @Field(() => Int)
  page: number;
  @Field(() => Int)
  pageSize: number;
  @Field(() => Int)
  total: number;
  @Field(() => Int)
  totalPages: number;
  @Field(() => [Vulnerability])
  results: Vulnerability[];
}

@Resolver(() => Vulnerability)
export class VulnerabilityResolver{
  
  constructor(
        private readonly vulnerabilityService: VulnerabilityService,
        @Inject(PUB_SUB) private readonly pubSub: RedisPubSub
      ) { }
    
      // Date conversion helper
      public convertDates(payload: any): Vulnerability {
        const dateFields = ['created', 'modified', 'valid_from', 'valid_until'];
        dateFields.forEach(field => {
          if (payload[field]) payload[field] = new Date(payload[field]);
        });
        return payload;
      }
    
    
  // Subscription Definitions
  @Subscription(() => Vulnerability, {
    name: 'vulnerabilityCreated',
    resolve: (payload) => payload,
  })
  vulnerabilityCreated() {
    return this.pubSub.asyncIterator('vulnerabilityCreated');
  }
  @Subscription(() => Vulnerability, {
    name: 'vulnerabilityUpdated',
    resolve: (payload) => payload,
  })
  vulnerabilityUpdated() {
    return this.pubSub.asyncIterator('vulnerabilityUpdated');
  }
  @Subscription(() => String, { name: 'vulnerabilityDeleted' })
  vulnerabilityDeleted() {
    return this.pubSub.asyncIterator('vulnerabilityDeleted');   
  }

  @Mutation(() => Vulnerability)
  async createVulnerability(
    @Args('input') createVulnerabilityInput: CreateVulnerabilityInput,
  ): Promise<Vulnerability> {
    return this.vulnerabilityService.create(createVulnerabilityInput);
  }

  @Query(() => VulnerabilitySearchResult)
  async searchVulnerabilities(
    @Args('filters', { type: () => SearchVulnerabilityInput, nullable: true }) filters: SearchVulnerabilityInput = {},
    @Args('page', { type: () => Int, defaultValue: 1 }) page: number,
    @Args('pageSize', { type: () => Int, defaultValue: 10 }) pageSize: number,
    @Args('sortField', { type: () => String, defaultValue: 'modified', nullable: true }) sortField: keyof Vulnerability = 'modified',
    @Args('sortOrder', { type: () => String, defaultValue: 'desc' }) sortOrder: 'asc' | 'desc' = 'desc',
  ): Promise<VulnerabilitySearchResult> {
    return this.vulnerabilityService.searchWithFilters(filters, page, pageSize, sortField, sortOrder);
  }

  @Query(() => Vulnerability, { nullable: true })
  async vulnerability(@Args('id') id: string): Promise<Vulnerability> {
    return this.vulnerabilityService.findOne(id);
  }

  @Query(() => Vulnerability, { nullable: true })
  async vulnerabilityByCveId(@Args('cveId') cveId: string): Promise<Vulnerability> {
    return this.vulnerabilityService.findByCveId(cveId);
  }

  @Mutation(() => Vulnerability)
  async updateVulnerability(
    @Args('id') id: string,
    @Args('input') updateVulnerabilityInput: UpdateVulnerabilityInput,
  ): Promise<Vulnerability> {
    return this.vulnerabilityService.update(id, updateVulnerabilityInput);
  }

  @Mutation(() => Boolean)
  async deleteVulnerability(@Args('id') id: string): Promise<boolean> {
    return this.vulnerabilityService.remove(id);
  }
}