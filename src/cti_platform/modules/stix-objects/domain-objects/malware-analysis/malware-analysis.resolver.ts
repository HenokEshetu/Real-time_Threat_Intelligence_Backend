import { Resolver, Query, InputType, Mutation, Args, Int } from '@nestjs/graphql';
import { MalwareAnalysisService } from './malware-analysis.service';
import { MalwareAnalysis } from './malware-analysis.entity';
import { CreateMalwareAnalysisInput, UpdateMalwareAnalysisInput } from './malware-analysis.input';
import { ObjectType, Field } from '@nestjs/graphql';
import { PartialType } from '@nestjs/graphql';

@InputType()
export class SearchMalwareAnalysisInput extends PartialType(CreateMalwareAnalysisInput){}

@ObjectType()
export class MalwareAnalysisSearchResult {
  @Field(() => Int)
  page: number;
  @Field(() => Int)
  pageSize: number;
  @Field(() => Int)
  total: number;
  @Field(() => Int)
  totalPages: number;
  @Field(() => [MalwareAnalysis])
  results: MalwareAnalysis[];
}

@Resolver(() => MalwareAnalysis)
export class MalwareAnalysisResolver {
  constructor(private readonly malwareAnalysisService: MalwareAnalysisService) {}

  @Mutation(() => MalwareAnalysis)
  async createMalwareAnalysis(
    @Args('input') createMalwareAnalysisInput: CreateMalwareAnalysisInput,
  ): Promise<MalwareAnalysis> {
    return this.malwareAnalysisService.create(createMalwareAnalysisInput);
  }

  @Query(() => MalwareAnalysisSearchResult)
  async searchMalwareAnalyses(
    @Args('filters', { type: () => SearchMalwareAnalysisInput, nullable: true }) filters: SearchMalwareAnalysisInput = {},
    @Args('page', { type: () => Int, defaultValue: 1 }) page: number,
    @Args('pageSize', { type: () => Int, defaultValue: 10 }) pageSize: number,
  ): Promise<MalwareAnalysisSearchResult> {
    return this.malwareAnalysisService.searchWithFilters(filters, page, pageSize);
  }

  @Query(() => MalwareAnalysis, { nullable: true })
  async malwareAnalysis(@Args('id') id: string): Promise<MalwareAnalysis> {
    return this.malwareAnalysisService.findOne(id);
  }

  @Mutation(() => MalwareAnalysis)
  async updateMalwareAnalysis(
    @Args('id') id: string,
    @Args('input') updateMalwareAnalysisInput: UpdateMalwareAnalysisInput,
  ): Promise<MalwareAnalysis> {
    return this.malwareAnalysisService.update(id, updateMalwareAnalysisInput);
  }

  @Mutation(() => Boolean)
  async deleteMalwareAnalysis(@Args('id') id: string): Promise<boolean> {
    return this.malwareAnalysisService.remove(id);
  }
}