import { Resolver, Query, InputType, Mutation, Args, Int, Subscription } from '@nestjs/graphql';
import { MalwareAnalysisService } from './malware-analysis.service';
import { MalwareAnalysis } from './malware-analysis.entity';
import { CreateMalwareAnalysisInput, UpdateMalwareAnalysisInput } from './malware-analysis.input';
import { ObjectType, Field } from '@nestjs/graphql';
import { PartialType } from '@nestjs/graphql';
import { Inject } from '@nestjs/common';
import { PUB_SUB } from 'src/cti_platform/modules/pubsub.module';
import { RedisPubSub } from 'graphql-redis-subscriptions';

@InputType()
export class SearchMalwareAnalysisInput extends PartialType(CreateMalwareAnalysisInput){}

@ObjectType()
export class MalwareAnalysisSearchResult {
  @Field(() => Int)
  page: number;
  @Field(() => Int)
  pageSize: number;
  @Field(() => Int)
  total: number;
  @Field(() => Int)
  totalPages: number;
  @Field(() => [MalwareAnalysis])
  results: MalwareAnalysis[];
}

@Resolver(() => MalwareAnalysis)
export class MalwareAnalysisResolver {
    constructor(
      private readonly malwareAnalysisService: MalwareAnalysisService,
      @Inject(PUB_SUB) private readonly pubSub: RedisPubSub
    ) { }
  
    // Date conversion helper
    public convertDates(payload: any): MalwareAnalysis {
      const dateFields = ['created', 'modified', 'valid_from', 'valid_until'];
      dateFields.forEach(field => {
        if (payload[field]) payload[field] = new Date(payload[field]);
      });
      return payload;
    }
  
    // Subscription Definitions
    @Subscription(() => MalwareAnalysis, {
      name: 'malwareAnalysisCreated',
      resolve: (payload) => payload,
    })
    malwareAnalysisCreated() {
      return this.pubSub.asyncIterator('malwareAnalysisCreated');
    }
  
    @Subscription(() => MalwareAnalysis, {
      name: 'malwareAnalysisUpdated',
      resolve: (payload) => payload,
    })
    malwareAnalysisUpdated() {
      return this.pubSub.asyncIterator('malwareAnalysisUpdated');
    }
  
    @Subscription(() => String, { name: 'malwareAnalysisDeleted' })
    malwareAnalysisDeleted() {
      return this.pubSub.asyncIterator('malwareAnalysisDeleted');
    }
  

  @Mutation(() => MalwareAnalysis)
  async createMalwareAnalysis(
    @Args('input') createMalwareAnalysisInput: CreateMalwareAnalysisInput,
  ): Promise<MalwareAnalysis> {
    return this.malwareAnalysisService.create(createMalwareAnalysisInput);
  }

  @Query(() => MalwareAnalysisSearchResult)
  async searchMalwareAnalyses(
    @Args('filters', { type: () => SearchMalwareAnalysisInput, nullable: true }) filters: SearchMalwareAnalysisInput = {},
    @Args('page', { type: () => Int, defaultValue: 1 }) page: number,
    @Args('pageSize', { type: () => Int, defaultValue: 10 }) pageSize: number,
  ): Promise<MalwareAnalysisSearchResult> {
    return this.malwareAnalysisService.searchWithFilters(filters, page, pageSize);
  }

  @Query(() => MalwareAnalysis, { nullable: true })
  async malwareAnalysis(@Args('id') id: string): Promise<MalwareAnalysis> {
    return this.malwareAnalysisService.findOne(id);
  }

  @Mutation(() => MalwareAnalysis)
  async updateMalwareAnalysis(
    @Args('id') id: string,
    @Args('input') updateMalwareAnalysisInput: UpdateMalwareAnalysisInput,
  ): Promise<MalwareAnalysis> {
    return this.malwareAnalysisService.update(id, updateMalwareAnalysisInput);
  }

  @Mutation(() => Boolean)
  async deleteMalwareAnalysis(@Args('id') id: string): Promise<boolean> {
    return this.malwareAnalysisService.remove(id);
  }
}